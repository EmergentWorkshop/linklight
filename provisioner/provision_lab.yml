- name: Perform Checks to make sure this Playbook will complete successfully
  hosts: localhost
  connection: local
  become: no
  gather_facts: yes
  tasks:
    - name: make sure we are running correct Ansible Version
      assert:
        that:
          - ansible_version.major >= 2
          - ansible_version.minor >= 7

    - name: make sure workshop_type is set to a correct value
      assert:
        that:
          - workshop_type is defined
          - workshop_type is in valid_workshop_types
        msg: "workshop_type must be defined and be one of: {{valid_workshop_types}}"

    - name: run role to check if local environment setup will work with AWS
      include_role:
        name: aws_check_setup

    - name: make sure we are not running with TESTWORKSHOP as the name so no overlap
      assert:
        that:
          - ec2_name_prefix != "TESTWORKSHOP"

    - name: if special lab is defined, make sure its a supported mode
      assert:
        that: special is match("all_cisco") or special is match("multivendor")
      when:
        - special is defined

    - name: auto license feature for Ansible Tower
      block:
        - name: Check that the provided license exists
          stat:
            path: "{{playbook_dir}}/tower_license.json"
          register: stat_result
        - debug:
            var: stat_result
        - fail:
            msg: "autolicense is turned on, but we need a license located at {{playbook_dir}}/tower_license.json"
          when:
           - not stat_result.stat.exists
      when:
       - autolicense is defined
       - autolicense

- name: Create lab instances in AWS
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  roles:
    - manage_ec2_instances

- name: wait for all nodes to have SSH reachability
  hosts: "managed_nodes:control_nodes"
  become: yes
  gather_facts: no
  roles:
    - connectivity_test

- name: Configure common options on managed nodes and control nodes
  hosts: "managed_nodes:control_nodes"
  gather_facts: no
  become: yes
  roles:
    - user_accounts
    - common

- name: CONFIGURE F5 WORKSHOP WEBSERVERS host1 and host2
  hosts: lab_hosts
  become: yes
  gather_facts: no
  roles:
    - { role: webservers, when: workshop_type == "f5" }

- name: CONFIGURE CONTROL NODE
  hosts: control_nodes
  gather_facts: no
  become: yes
  roles:
    - control_node

- name: ADD DNS ENTRIES FOR ALL STUDENT TOWER NODES
  hosts: control_nodes
  become: yes
  gather_facts: no
  roles:
    - { role: aws_dns, when: create_login_page is defined and create_login_page }

- name: Setup Amazon S3 Website for Student Login
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  roles:
    - { role: aws_workshop_login_page, when: create_login_page is defined and create_login_page }

- name: Setup Host routes for ansible control node and host1 when in networking mode
  hosts: "managed_nodes:control_nodes"
  become: no
  gather_facts: no
  roles:
    - { role: network_hostroutes, when: workshop_type == "networking" }

- name: setup f5 nodes
  hosts: f5
  become: no
  connection: local
  gather_facts: no
  roles:
    - { role: f5_setup, when: workshop_type == "f5" }

- name: GATHER AWS FACTS FOR ROUTERS
  hosts: access,core
  connection: local
  gather_facts: no
  roles:
    - { role: gather_router_facts }

- name: CONFIGURE ACCESS ROUTERS
  hosts: access
  connection: local
  gather_facts: no

  roles:
    - role: configure_routers
      vars:
        type: csr_access
        router3_tunnel: 100
        router4_tunnel: 101
      when: special is match("all_cisco")

- name: CONFIGURE CORE ROUTERS
  hosts: core
  connection: local
  gather_facts: no

  roles:
    - role: configure_routers
      vars:
        type: csr_core
        router1_tunnel: 100
        router2_tunnel: 101
        dci_tunnel: 200
      when: special is match("all_cisco")

- name: CONFIGURE CORE ROUTERS
  hosts: dmvpn
  connection: local
  gather_facts: no

  roles:
    - role: configure_routers
      vars:
        type: csr_hub
      when: special is match("all_cisco")

- name: CHANGE JUNIPER PASSWORD
  hosts: access
  gather_facts: no
  vars:
    ansible_connection: network_cli
  tasks:
    - name: Run tasks/other.yaml instead of 'main'
      include_role:
        name: configure_routers
        tasks_from: juniper_default
      when: special is match("multivendor")

- name: Alert the mothership
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  tasks:
    - { include_role: {name: tower_request}, when: student_total > 9 }

  post_tasks:
    - name: set facts for output
      set_fact:
        summary_information: |
          PROVISIONER SUMMARY
          *******************
          - Workshop name is {{ec2_name_prefix}}
          - Instructor inventory is located at  {{playbook_dir}}/{{ec2_name_prefix}}/instructor_inventory.txt
          - Private key is located at {{playbook_dir}}/{{ec2_name_prefix}}/{{ec2_name_prefix}}.pem
          {{website_information}}
          FAILURES
          *******************
          {{dns_information}}

    - name: Print Summary Information
      debug:
        msg: "{{summary_information}}"

- name: TOWER CONFIGURATION IN PLAYBOOK FORM
  hosts: control_nodes
  connection: local
  become: yes
  gather_facts: no

  pre_tasks:
    - name: INSTALL TOWER-CLI
      pip:
        name: ansible-tower-cli

  tasks:
#ORGS
    - name: CREATE NETWORK ORGANIZATION
      tower_organization:
        name: "REDHAT NETWORK ORGANIZATION"
        description: "RedHat Network Organization"
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

    - name: CREATE COMPUTE ORGANIZATION
      tower_organization:
        name: "REDHAT COMPUTE ORGANIZATION"
        description: "RedHat Compute Organization"
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

#INVENTORY
    - name: CREATE INVENTORY
      tower_inventory:
        name: "Workshop Inventory"
        organization: REDHAT NETWORK ORGANIZATION
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

#TEAMS
    - name: CREATE NETOPS TEAM
      tower_team:
        name: "Netops"
        description: "Network Ops Team"
        organization: "REDHAT NETWORK ORGANIZATION"
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

    - name: CREATE NETADMIN TEAM
      tower_team:
        name: "Netadmin"
        description: "Network Admin Team"
        organization: "REDHAT NETWORK ORGANIZATION"
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

    - name: CREATE COMPUTE TIER1 TEAM
      tower_team:
        name: "Compute T1"
        description: "Computer T1 Team"
        organization: "REDHAT COMPUTE ORGANIZATION"
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

    - name: CREATE COMPUTE TIER2 TEAM
      tower_team:
        name: "Compute T2"
        description: "Computer T1 Team"
        organization: "REDHAT COMPUTE ORGANIZATION"
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

#USERS
    - name: ADD USER NWOPERATOR
      tower_user:
        username: network-operator
        password: "{{ admin_password }}"
        email: nwops@redhat.com
        first_name: Issac
        last_name: Assimov
        state: present
        superuser: no
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

    - name: ADD USER NWADMIN
      tower_user:
        username: network-admin
        password: "{{ admin_password }}"
        email: nwadmin@redhat.com
        first_name: Larry
        last_name: Niven
        state: present
        superuser: no
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

    - name: ADD USER BOB
      tower_user:
        username: bbelcher
        password: "{{ admin_password }}"
        email: bbelcher@redhat.com
        first_name: Bob
        last_name: Belcher
        state: present
        superuser: yes
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

    - name: ADD USER TINA
      tower_user:
        username: tbelcher
        password: "{{ admin_password }}"
        email: tbelcher@redhat.com
        first_name: Tina
        last_name: Belcher
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

    - name: ADD USER LOUISE
      tower_user:
        username: lbelcher
        password: "{{ admin_password }}"
        email: lbelcher@redhat.com
        first_name: Louise
        last_name: Belcher
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

    - name: ADD USER LINDA
      tower_user:
        username: libelcher
        password: "{{ admin_password }}"
        email: libelcher@redhat.com
        first_name: Linda
        last_name: Belcher
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

    - name: ADD USER GENE
      tower_user:
        username: gbelcher
        password: "{{ admin_password }}"
        email: gbelcher@redhat.com
        first_name: Gene
        last_name: Belcher
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

#PROJECT
    - name: ADD REPO INTO TOWER
      tower_project:
        name: "Workshop Project"
        organization: "REDHAT NETWORK ORGANIZATION"
        scm_type: git
        scm_url: "https://github.com/network-automation/tower_workshop"
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

#PERMISSIONS
    - name: ENSURE THAT NWADMIN BELONGS TO THE NW ORG
      tower_role:
        user: network-admin
        organization: "REDHAT NETWORK ORGANIZATION"
        role: member
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

    - name: ENSURE THAT NWADMIN IS AN ORG ADMIN
      tower_role:
        user: network-admin
        organization: "REDHAT NETWORK ORGANIZATION"
        #team: "Netadmin"
        role: admin
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

    - name: ENSURE THAT NWOP BELONGS TO THE NW ORG
      tower_role:
        user: network-operator
        organization: "REDHAT NETWORK ORGANIZATION"
        role: member
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

    - name: ENSURE THAT NWOP CAN ONLY EXECUTE TEMPLATES
      tower_role:
        user: network-operator
        target_team: "Netops"
        role: member
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no


- name: TOWER CONFIGURATION IN PLAYBOOK FORM (FOR REMOTE EXECUTION)
  hosts: control_nodes
  become: yes
  gather_facts: no

#CREDENTIAL

  tasks:
    - name: ADD CREDENTIAL INTO TOWER
      tower_credential:
        username: ec2-user
        name: "Workshop Credential"
        ssh_key_data: "/home/{{ username }}/.ssh/aws-private.pem"
        kind: ssh
        organization: REDHAT NETWORK ORGANIZATION
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

    - name: IMPORT INVENTORY
      shell: 'tower-manage inventory_import --source=/home/{{ username }}/networking-workshop/lab_inventory/hosts --inventory-name="Workshop Inventory"'

- name: TOWER JOB TEMPLATES IN PLAYBOOK FORM
  hosts: control_nodes
  become: yes
  connection: local
  gather_facts: no

  tasks:
#REMOVE HARD CODED SSH_KEY VAR
    - name: REMOVE HARD CODED SSH KEY VAR IN INVENTORY
      uri:
        url: "https://{{ansible_host}}/api/v2/inventories/2/"
        user: "admin"
        password: "{{admin_password}}"
        method: PATCH
        validate_certs: False
        force_basic_auth: yes
        body_format: json
        body: ' {"variables": ""}'
        status_code:
          - 200
          - 204
      register: result_uri
      ignore_errors: yes

#JOB TEMPLATES
    - name: CREATE BACKUP JOB IN TOWER
      tower_job_template:
        name: "Network-Backup"
        job_type: "run"
        inventory: "Workshop Inventory"
        project: "Workshop Project"
        playbook: "network_backup.yml"
        credential: "Workshop Credential"
        state: "present"
        limit: "cisco"
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

    - name: CREATE SHOW COMMAND JOB IN TOWER
      tower_job_template:
        name: "Network-Commands"
        job_type: "run"
        inventory: "Workshop Inventory"
        project: "Workshop Project"
        playbook: "network_commands.yml"
        credential: "Workshop Credential"
        state: "present"
        limit: "cisco"
        survey_enabled: yes
        survey_spec: "{{ lookup('template', './templates/survey_spec.json') }}"
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no

#JOB TEMPLATE PERMISSIONS
    - name: ENSURE THAT NWOP CAN EXECUTE BACKUP AND SHOW COMMANDS
      tower_role:
        user: network-operator
        role: execute
        job_template: "{{ item }}"
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no
      loop:
        - "Network-Backup"
        - "Network-Commands"

    - name: ENSURE THAT NW ORG CAN USE THE WS INV
      tower_role:
        role: use
        inventory: Workshop Inventory
        team: "{{ item }}"
        state: present
        tower_username: admin
        tower_password: "{{ admin_password }}"
        tower_host: "{{ ansible_host }}"
        tower_verify_ssl: no
      tags:
        - inv
      loop:
        - Netops
        - Netadmin
