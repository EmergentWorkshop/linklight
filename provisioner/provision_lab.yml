- name: Perform Checks to make sure this Playbook will complete successfully
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  tasks:
    - name: make sure we are running correct Ansible Version
      assert:
        that:
          - ansible_version.major >= 2
          - ansible_version.minor >= 7

      # F5workshop and networking workshop are two different workshops
    - name: make sure f5workshop is not turned on when networking is
      assert:
        msg: "f5workshop and networking are mutually exclusive. Choose only one."
        that:
          - not f5workshop
      when: networking

      # F5workshop and networking workshop are two different workshops
    - name: make sure networking is not turned on when f5workshop is
      assert:
        msg: "networking and f5workshop are mutually exclusive. Choose only one."
        that:
          - not networking
      when: f5workshop

    - name: run role to check if local environment setup will work with AWS
      include_role:
        name: aws_check_setup

    - name: make sure we are not running with TESTWORKSHOP as the name so no overlap
      assert:
        that:
          - ec2_name_prefix != "TESTWORKSHOP"

    - name: if special lab is defined, make sure its a supported mode
      assert:
        that: special is match("all_cisco") or special is match("multivendor")
      when:
        - special is defined

    - name: AUTO LICENSE FEATURE FOR ANSIBLE TOWER
      block:
        - name: CHECK THAT THE PROVIDED LICENSE EXISTS
          stat:
            path: "{{playbook_dir}}/tower_license.json"
          register: stat_result
        - debug:
            var: stat_result
        - fail:
            msg: "autolicense is turned on, but we need a license located at {{playbook_dir}}/tower_license.json"
          when:
           - not stat_result.stat.exists
      when:
       - autolicense is defined
       - autolicense

    - name: SET FACTS FOR OUTPUT
      set_fact:
        summary_information: |
          {{summary_information}}
          - Workshop name is {{ec2_name_prefix}}
          - Instructor inventory is located at  {{playbook_dir}}/{{ec2_name_prefix}}/instructor_inventory.txt
          - Private key is located at {{playbook_dir}}/{{ec2_name_prefix}}/{{ec2_name_prefix}}.pem

- name: CREATE LAB INSTANCES IN AWS
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  tasks:
    - { include_role: {name: manage_ec2_instances} }

- name: WAIT FOR ALL CONTROL NODES TO HAVE SSH REACHABILITY
  hosts: "managed_nodes:control_nodes"
  become: yes
  gather_facts: no
  tasks:
    - { include_role: {name: connectivity_test}}

- name: WAIT FOR ROUTERS TO HAVE SSH REACHABILITY
  hosts: "routers"
  gather_facts: no
  tasks:
    - name: MAKE SURE ROUTERS HAVE SSH REACHABILITY
      include_role:
        name: connectivity_test
        tasks_from: routers
      when: special is match("multivendor")

- name: CONFIGURE COMMON OPTIONS ON MANAGED NODES AND CONTROL NODES
  hosts: "managed_nodes:control_nodes"
  become: yes
  roles:
    - user_accounts
    - common

- name: CONFIGURE F5 WORKSHOP WEBSERVERS host1 and host2
  hosts: lab_hosts
  become: yes
  gather_facts: no
  roles:
    - { role: webservers, when: f5workshop }

- name: CONFIGURE CONTROL NODE
  hosts: control_nodes
  become: yes
  roles:
    - control_node

- name: ADD DNS ENTRIES FOR ALL STUDENT TOWER NODES
  hosts: control_nodes
  become: True
  gather_facts: no
  roles:
    - { role: aws_dns, when: create_login_page is defined and create_login_page }

- name: SETUP AMAZON S3 WEBSITE FOR STUDENT LOGIN
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  roles:
    - { role: aws_workshop_login_page, when: create_login_page is defined and create_login_page }

- name: SETUP HOST ROUTES FOR ANSIBLE CONTROL NODE AND HOST1 (networking mode)
  hosts: "managed_nodes:control_nodes"
  become: no
  gather_facts: no
  roles:
    - { role: network_hostroutes, when: networking }

- name: SETUP F5 NODES
  hosts: f5
  become: no
  connection: local
  gather_facts: no
  roles:
    - { role: f5_setup, when: f5workshop }

- name: GATHER AWS FACTS FOR ROUTERS
  hosts: access,core
  connection: local
  gather_facts: no
  roles:
    - { role: gather_router_facts }

- name: CONFIGURE ACCESS ROUTERS
  hosts: access
  connection: local
  gather_facts: no
  roles:
    - role: configure_routers
      vars:
        type: csr_access
        router3_tunnel: 100
        router4_tunnel: 101
      when: special is match("all_cisco")

- name: CONFIGURE CORE ROUTERS
  hosts: core
  connection: local
  gather_facts: no

  roles:
    - role: configure_routers
      vars:
        type: csr_core
        router1_tunnel: 100
        router2_tunnel: 101
        dci_tunnel: 200
      when: special is match("all_cisco")

- name: CONFIGURE CORE ROUTERS
  hosts: dmvpn
  connection: local
  gather_facts: no

  roles:
    - role: configure_routers
      vars:
        type: csr_hub
      when: special is match("all_cisco")

- name: CHANGE HOSTNAME ON ROUTERS
  hosts: routers
  gather_facts: no
  tasks:
    - name: CHANGE THE HOSTNAME
      include_role:
        name: configure_routers
        tasks_from: hostname
      when: special is match("multivendor")

- name: CHANGE JUNIPER PASSWORD
  hosts: juniper
  gather_facts: no
  vars:
    ansible_connection: network_cli
  tasks:
    - name: CONFIGURE THE JUNIPER PASSWORD
      include_role:
        name: configure_routers
        tasks_from: juniper_default
      when: special is match("multivendor")

- name: ALERT THE MOTHERSHIP
  hosts: localhost
  become: no
  gather_facts: no
  tasks:
    - { include_role: {name: tower_request}, when: student_total > 9 }

  post_tasks:
    - name: PRINT SUMMARY INFORMATION
      debug:
        msg: "{{summary_information}}"
